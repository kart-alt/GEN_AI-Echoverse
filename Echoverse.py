# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ofhz8uSFwkHlvvoDQ2vT6mwVNNG9Jf7V
"""

# EchoVerse - AI-Powered Audiobook Creator for Google Colab
# Run this entire code in a single Colab cell

# ==================== INSTALLATION ====================
import subprocess
import sys
import os

def install_packages():
    """Install required packages"""
    packages = [
        'gradio>=4.0.0',
        'torch>=2.0.0',
        'transformers>=4.40.0',
        'accelerate>=0.20.0',
        'gtts>=2.5.0',
        'langdetect>=1.0.9',
        'numpy>=1.24.0',
        'requests>=2.31.0',
        'huggingface-hub>=0.20.0',
        'tokenizers>=0.15.0'
    ]

    print("üöÄ Installing packages...")
    for package in packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úÖ Installed: {package}")
        except Exception as e:
            print(f"‚ùå Failed to install {package}: {e}")

# Install packages
install_packages()

# ==================== IMPORTS ====================
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from gtts import gTTS
import tempfile
import os
import time
from langdetect import detect
import uuid
import shutil

# ==================== MODEL HANDLER ====================
class GraniteRewriter:
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.model_loaded = False
        self.model_name = "ibm-granite/granite-3b-code-instruct"

    def load_model(self):
        """Load the IBM Granite model"""
        if self.model_loaded:
            return True

        try:
            print("üî• Loading IBM Granite model...")
            print("This may take a few minutes on first run...")

            # Load tokenizer
            self.tokenizer = AutoTokenizer.from_pretrained(
                self.model_name,
                trust_remote_code=True
            )

            # Set pad token if it doesn't exist
            if self.tokenizer.pad_token is None:
                self.tokenizer.pad_token = self.tokenizer.eos_token

            # Load model
            device = "cuda" if torch.cuda.is_available() else "cpu"
            dtype = torch.float16 if torch.cuda.is_available() else torch.float32

            self.model = AutoModelForCausalLM.from_pretrained(
                self.model_name,
                torch_dtype=dtype,
                device_map="auto" if torch.cuda.is_available() else None,
                trust_remote_code=True,
                low_cpu_mem_usage=True
            )

            self.model_loaded = True
            print(f"‚úÖ Model loaded successfully on {device}!")
            return True

        except Exception as e:
            print(f"‚ùå Error loading model: {str(e)}")
            return False

    def rewrite_text(self, text, tone):
        """Rewrite text with specified tone"""
        if not self.model_loaded:
            if not self.load_model():
                return f"‚ö†Ô∏è Model not available. Original text: {text}"

        tone_prompts = {
            'neutral': "Rewrite the following text in a clear, neutral, and professional tone while preserving all key information:",
            'suspenseful': "Rewrite the following text in a suspenseful, dramatic tone that builds tension and intrigue:",
            'inspiring': "Rewrite the following text in an inspiring, motivational tone that uplifts and energizes the reader:"
        }

        prompt = f"{tone_prompts.get(tone, tone_prompts['neutral'])}\n\nOriginal text: {text}\n\nRewritten text:"

        try:
            inputs = self.tokenizer(
                prompt,
                return_tensors="pt",
                truncation=True,
                max_length=512,
                padding=True
            )

            with torch.no_grad():
                outputs = self.model.generate(
                    **inputs,
                    max_new_tokens=200,
                    temperature=0.7,
                    do_sample=True,
                    pad_token_id=self.tokenizer.eos_token_id,
                    eos_token_id=self.tokenizer.eos_token_id
                )

            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)

            # Extract only the rewritten part
            if "Rewritten text:" in response:
                rewritten = response.split("Rewritten text:")[-1].strip()
                return rewritten if rewritten else text

            # Fallback: remove the prompt from response
            response_cleaned = response.replace(prompt, "").strip()
            return response_cleaned if response_cleaned else text

        except Exception as e:
            print(f"Error in rewriting: {str(e)}")
            return f"‚ö†Ô∏è Rewriting failed. Original text: {text}"

# ==================== AUDIO GENERATOR ====================
class AudioGenerator:
    def __init__(self):
        self.supported_languages = {
            'en': 'English', 'es': 'Spanish', 'fr': 'French', 'de': 'German',
            'it': 'Italian', 'pt': 'Portuguese', 'ru': 'Russian', 'ja': 'Japanese',
            'ko': 'Korean', 'zh': 'Chinese', 'ar': 'Arabic', 'hi': 'Hindi',
            'nl': 'Dutch', 'pl': 'Polish', 'tr': 'Turkish'
        }

    def detect_language(self, text):
        """Detect the language of the text"""
        try:
            detected = detect(text)
            return detected if detected in self.supported_languages else 'en'
        except:
            return 'en'

    def generate_audio(self, text, language='en', slow=False):
        """Generate audio from text using gTTS"""
        try:
            # Create temporary file
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp3')
            temp_file.close()

            # Generate TTS
            tts = gTTS(text=text, lang=language, slow=slow)
            tts.save(temp_file.name)

            return temp_file.name

        except Exception as e:
            print(f"Error generating audio: {str(e)}")
            return None

# ==================== INITIALIZE COMPONENTS ====================
print("üîß Initializing components...")
granite_rewriter = GraniteRewriter()
audio_generator = AudioGenerator()

# ==================== GRADIO INTERFACE FUNCTIONS ====================
def process_and_generate_audio(text_input, file_input, tone, slow_speech):
    """Main function to process text and generate audio"""
    try:
        # Handle file input
        if file_input is not None:
            try:
                with open(file_input.name, 'r', encoding='utf-8') as f:
                    text = f.read()
            except:
                return "‚ùå Error reading uploaded file. Please ensure it's a text file.", None, None, None, None
        elif text_input and text_input.strip():
            text = text_input.strip()
        else:
            return "‚ùå Please provide text input or upload a text file.", None, None, None, None

        if len(text) > 5000:
            text = text[:5000] + "..."

        # Detect language
        detected_lang = audio_generator.detect_language(text)
        lang_name = audio_generator.supported_languages.get(detected_lang, 'English')

        # Rewrite text with selected tone
        print(f"üé® Rewriting text with {tone} tone...")
        rewritten_text = granite_rewriter.rewrite_text(text, tone)

        # Generate audio
        print(f"üéµ Generating audio in {lang_name}...")
        audio_file = audio_generator.generate_audio(rewritten_text, detected_lang, slow_speech)

        if audio_file:
            status = f"‚úÖ Success! Language: {lang_name} | Tone: {tone.title()}"
            return status, text, rewritten_text, audio_file, audio_file
        else:
            return "‚ùå Failed to generate audio", text, rewritten_text, None, None

    except Exception as e:
        return f"‚ùå Error: {str(e)}", None, None, None, None

def clear_all():
    """Clear all inputs and outputs"""
    return "", None, "", "", "", None, None

# ==================== GRADIO INTERFACE ====================
def create_interface():
    """Create the Gradio interface"""

    # Custom CSS for better styling
    css = """
    .gradio-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .gr-button-primary {
        background: linear-gradient(90deg, #6366f1, #8b5cf6) !important;
        border: none !important;
        border-radius: 25px !important;
        font-weight: 600 !important;
    }
    .gr-button-secondary {
        border-radius: 20px !important;
        font-weight: 500 !important;
    }
    .gr-panel {
        border-radius: 15px !important;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1) !important;
    }
    """

    with gr.Blocks(css=css, title="EchoVerse - AI Audiobook Creator") as interface:
        gr.HTML("""
        <div style="text-align: center; padding: 30px; background: linear-gradient(90deg, #6366f1, #8b5cf6); border-radius: 20px; margin-bottom: 30px;">
            <h1 style="color: white; font-size: 3em; margin-bottom: 10px;">üéß EchoVerse</h1>
            <p style="color: white; font-size: 1.3em; opacity: 0.9;">Transform your text into expressive audiobooks with AI</p>
            <p style="color: white; font-size: 1em; opacity: 0.8;">Powered by IBM Granite LLM & Multi-language TTS</p>
        </div>
        """)

        with gr.Row():
            with gr.Column(scale=2):
                gr.Markdown("## üìù Input Text")
                text_input = gr.Textbox(
                    label="Enter your text",
                    placeholder="Paste your text here or upload a file...",
                    lines=8,
                    max_lines=15
                )

                file_input = gr.File(
                    label="üìÅ Or upload a text file (.txt, .md)",
                    file_types=[".txt", ".md"]
                )

                with gr.Row():
                    tone = gr.Radio(
                        choices=["neutral", "suspenseful", "inspiring"],
                        value="neutral",
                        label="üé® Select Tone",
                        interactive=True
                    )

                    slow_speech = gr.Checkbox(
                        label="üêå Slow Speech",
                        value=False
                    )

        with gr.Row():
            process_btn = gr.Button(
                "üöÄ Transform to Audiobook",
                variant="primary",
                size="lg"
            )
            clear_btn = gr.Button(
                "üóëÔ∏è Clear All",
                variant="secondary",
                size="lg"
            )

        status_output = gr.Textbox(label="üìä Status", interactive=False)

        with gr.Row():
            with gr.Column():
                gr.Markdown("### üìÑ Original Text")
                original_display = gr.Textbox(
                    label="Original",
                    lines=6,
                    interactive=False
                )

            with gr.Column():
                gr.Markdown("### ‚ú® AI-Enhanced Text")
                rewritten_display = gr.Textbox(
                    label="AI-Enhanced",
                    lines=6,
                    interactive=False
                )

        gr.Markdown("## üéµ Generated Audiobook")
        audio_output = gr.Audio(
            label="üéß Play Audiobook",
            type="filepath"
        )

        download_file = gr.File(
            label="üì• Download MP3",
            interactive=False
        )

        # Event handlers
        process_btn.click(
            fn=process_and_generate_audio,
            inputs=[text_input, file_input, tone, slow_speech],
            outputs=[status_output, original_display, rewritten_display, audio_output, download_file]
        )

        clear_btn.click(
            fn=clear_all,
            outputs=[text_input, file_input, original_display, rewritten_display, status_output, audio_output, download_file]
        )

        # Example inputs
        gr.Examples(
            examples=[
                ["The quick brown fox jumps over the lazy dog. This is a simple test sentence.", "neutral", False],
                ["Scientists made a groundbreaking discovery that could change everything we know about the universe.", "suspenseful", False],
                ["You have the power to achieve anything you set your mind to. Believe in yourself and never give up.", "inspiring", True],
            ],
            inputs=[text_input, tone, slow_speech],
            label="üí° Try these examples"
        )

        gr.HTML("""
        <div style="text-align: center; padding: 20px; margin-top: 30px; background: rgba(255,255,255,0.1); border-radius: 15px;">
            <h3>üåü Features</h3>
            <p>‚ú® AI Text Enhancement with IBM Granite | üåç 15+ Language Support | üéµ High-Quality TTS | üì± Mobile Friendly</p>
            <p><strong>Supported Languages:</strong> English, Spanish, French, German, Italian, Portuguese, Russian, Japanese, Korean, Chinese, Arabic, Hindi, Dutch, Polish, Turkish</p>
        </div>
        """)

    return interface

# ==================== MAIN EXECUTION ====================
def main():
    """Main function to run the application"""
    print("üéØ Starting EchoVerse...")
    print(f"üî• PyTorch version: {torch.__version__}")
    print(f"üî• CUDA available: {torch.cuda.is_available()}")

    # Pre-load model (optional - will load on first use if not done here)
    print("ü§ñ Pre-loading IBM Granite model...")
    granite_rewriter.load_model()

    # Create and launch interface
    interface = create_interface()

    # Launch with public link for Colab
    interface.launch(
        share=True,  # Creates public link
        server_name="0.0.0.0",
        server_port=7860,
        show_error=True,
        debug=False
    )

# ==================== RUN THE APPLICATION ====================
if __name__ == "__main__":
    main()

print("""
üéâ EchoVerse is ready!
üì± The interface will open automatically
üåê A public sharing link will be generated for easy access
üéß Start creating amazing audiobooks!
""")

# EchoVerse Pro - Enhanced AI-Powered Audiobook Creator for Google Colab
# Premium UI/UX with Multi-language Support including Indian Languages - FIXED VERSION

# ==================== INSTALLATION ====================
import subprocess
import sys
import os

def install_packages():
    """Install required packages with fixed versions"""
    packages = [
        'gradio>=4.0.0',
        'torch>=2.0.0',
        'transformers>=4.40.0',
        'accelerate>=0.20.0',
        'gtts>=2.5.0',
        'langdetect>=1.0.9',
        'deep-translator>=1.11.4',  # Alternative to googletrans
        'numpy>=1.24.0',
        'requests>=2.31.0',
        'huggingface-hub>=0.20.0',
        'tokenizers>=0.15.0',
        'emoji>=2.8.0'  # For enhanced UI
    ]

    print("üöÄ Installing enhanced packages...")
    for package in packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úÖ Installed: {package}")
        except Exception as e:
            print(f"‚ùå Failed to install {package}: {e}")

# Install packages
install_packages()

# ==================== IMPORTS ====================
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from gtts import gTTS
from deep_translator import GoogleTranslator  # Fixed translator
import tempfile
import os
import time
from langdetect import detect
import uuid
import shutil
import json
import emoji
from datetime import datetime

# ==================== LANGUAGE CONFIGURATION ====================
LANGUAGE_CONFIG = {
    # Major International Languages
    'en': {'name': 'üá∫üá∏ English', 'flag': 'üá∫üá∏', 'family': 'International'},
    'es': {'name': 'üá™üá∏ Spanish', 'flag': 'üá™üá∏', 'family': 'International'},
    'fr': {'name': 'üá´üá∑ French', 'flag': 'üá´üá∑', 'family': 'International'},
    'de': {'name': 'üá©üá™ German', 'flag': 'üá©üá™', 'family': 'International'},
    'it': {'name': 'üáÆüáπ Italian', 'flag': 'üáÆüáπ', 'family': 'International'},
    'pt': {'name': 'üáµüáπ Portuguese', 'flag': 'üáµüáπ', 'family': 'International'},
    'ru': {'name': 'üá∑üá∫ Russian', 'flag': 'üá∑üá∫', 'family': 'International'},
    'ja': {'name': 'üáØüáµ Japanese', 'flag': 'üáØüáµ', 'family': 'International'},
    'ko': {'name': 'üá∞üá∑ Korean', 'flag': 'üá∞üá∑', 'family': 'International'},
    'zh': {'name': 'üá®üá≥ Chinese', 'flag': 'üá®üá≥', 'family': 'International'},
    'ar': {'name': 'üá∏üá¶ Arabic', 'flag': 'üá∏üá¶', 'family': 'International'},
    'nl': {'name': 'üá≥üá± Dutch', 'flag': 'üá≥üá±', 'family': 'International'},
    'pl': {'name': 'üáµüá± Polish', 'flag': 'üáµüá±', 'family': 'International'},
    'tr': {'name': 'üáπüá∑ Turkish', 'flag': 'üáπüá∑', 'family': 'International'},
    'th': {'name': 'üáπüá≠ Thai', 'flag': 'üáπüá≠', 'family': 'International'},
    'vi': {'name': 'üáªüá≥ Vietnamese', 'flag': 'üáªüá≥', 'family': 'International'},

    # Indian Languages
    'hi': {'name': 'üáÆüá≥ Hindi (‡§π‡§ø‡§®‡•ç‡§¶‡•Ä)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'bn': {'name': 'üáÆüá≥ Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'te': {'name': 'üáÆüá≥ Telugu (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'mr': {'name': 'üáÆüá≥ Marathi (‡§Æ‡§∞‡§æ‡§†‡•Ä)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'ta': {'name': 'üáÆüá≥ Tamil (‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'gu': {'name': 'üáÆüá≥ Gujarati (‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'kn': {'name': 'üáÆüá≥ Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'ml': {'name': 'üáÆüá≥ Malayalam (‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'pa': {'name': 'üáÆüá≥ Punjabi (‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'or': {'name': 'üáÆüá≥ Odia (‡¨ì‡¨°‡¨º‡¨ø‡¨Ü)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'as': {'name': 'üáÆüá≥ Assamese (‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'ur': {'name': 'üáÆüá≥ Urdu (ÿßÿ±ÿØŸà)', 'flag': 'üáÆüá≥', 'family': 'Indian'},
    'ne': {'name': 'üá≥üáµ Nepali (‡§®‡•á‡§™‡§æ‡§≤‡•Ä)', 'flag': 'üá≥üáµ', 'family': 'Indian'},
    'si': {'name': 'üá±üá∞ Sinhala (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω)', 'flag': 'üá±üá∞', 'family': 'Indian'},
    'my': {'name': 'üá≤üá≤ Myanmar (·Äô·Äº·Äî·Ä∫·Äô·Ä¨)', 'flag': 'üá≤üá≤', 'family': 'Indian'},
}

TONE_CONFIG = {
    'neutral': {'emoji': '‚öñÔ∏è', 'color': '#64748b', 'desc': 'Clear, professional, balanced'},
    'suspenseful': {'emoji': '‚ö°', 'color': '#dc2626', 'desc': 'Dramatic, tension-building, thrilling'},
    'inspiring': {'emoji': '‚≠ê', 'color': '#16a34a', 'desc': 'Motivational, uplifting, energizing'},
    'romantic': {'emoji': 'üíï', 'color': '#e11d48', 'desc': 'Warm, passionate, emotional'},
    'mysterious': {'emoji': 'üîÆ', 'color': '#7c3aed', 'desc': 'Enigmatic, intriguing, mystical'},
    'cheerful': {'emoji': 'üòä', 'color': '#ea580c', 'desc': 'Joyful, optimistic, lively'}
}

# ==================== ENHANCED MODEL HANDLER ====================
class EnhancedGraniteRewriter:
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.model_loaded = False
        self.model_name = "microsoft/DialoGPT-medium"  # More reliable fallback model
        self.translator = None

    def load_model(self):
        """Load the model with enhanced loading"""
        if self.model_loaded:
            return True

        try:
            print("üî• Loading AI model...")
            print("‚ú® This may take a few minutes on first run...")

            # Load tokenizer with enhanced configuration
            self.tokenizer = AutoTokenizer.from_pretrained(
                self.model_name,
                use_fast=True,
                padding_side="left"
            )

            # Enhanced tokenizer setup
            if self.tokenizer.pad_token is None:
                self.tokenizer.pad_token = self.tokenizer.eos_token

            # Load model with optimizations
            device = "cuda" if torch.cuda.is_available() else "cpu"

            self.model = AutoModelForCausalLM.from_pretrained(
                self.model_name,
                torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
                low_cpu_mem_usage=True,
                use_cache=True
            )

            self.model_loaded = True
            print(f"‚úÖ Model loaded successfully on {device}!")
            return True

        except Exception as e:
            print(f"‚ùå Error loading model: {str(e)}")
            print("‚ö†Ô∏è Will use basic text processing as fallback")
            return False

    def translate_text(self, text, target_language):
        """Translate text to target language using deep-translator"""
        if target_language == 'en':
            return text

        try:
            # Initialize translator if not already done
            if self.translator is None:
                self.translator = GoogleTranslator(source='auto', target=target_language)
            else:
                self.translator.target = target_language

            # Split long text into chunks to avoid API limits
            max_length = 4000
            if len(text) <= max_length:
                return self.translator.translate(text)

            # Process in chunks
            chunks = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            translated_chunks = []

            for chunk in chunks:
                translated_chunk = self.translator.translate(chunk)
                translated_chunks.append(translated_chunk)
                time.sleep(0.1)  # Small delay to avoid rate limiting

            return ' '.join(translated_chunks)

        except Exception as e:
            print(f"Translation error: {e}")
            return text

    def enhance_text_with_tone(self, text, tone):
        """Enhanced text processing with tone (AI-free fallback)"""
        tone_templates = {
            'neutral': lambda t: f"In a clear and balanced manner: {t}",
            'suspenseful': lambda t: f"With growing tension and mystery: {t.replace('.', '... ')}",
            'inspiring': lambda t: f"With great enthusiasm and motivation: {t.replace(' ', ' truly ')}",
            'romantic': lambda t: f"With deep emotion and tenderness: {t.replace(' and ', ' and lovingly ')}",
            'mysterious': lambda t: f"In whispered tones of ancient secrets: {t.replace(' the ', ' the enigmatic ')}",
            'cheerful': lambda t: f"With boundless joy and energy: {t.replace(' ', ' delightfully ')}"
        }

        return tone_templates.get(tone, tone_templates['neutral'])(text)

    def rewrite_text(self, text, tone, target_language='en'):
        """Enhanced text rewriting with tone and language support"""
        try:
            # Apply tone enhancement
            enhanced_text = self.enhance_text_with_tone(text, tone)

            # If model is loaded, try AI enhancement
            if self.model_loaded and self.model is not None:
                try:
                    prompt = f"Rewrite this text with a {tone} tone: {text}"
                    inputs = self.tokenizer.encode(prompt, return_tensors='pt', truncation=True, max_length=512)

                    with torch.no_grad():
                        outputs = self.model.generate(
                            inputs,
                            max_new_tokens=200,
                            temperature=0.8,
                            top_p=0.9,
                            do_sample=True,
                            pad_token_id=self.tokenizer.eos_token_id
                        )

                    response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
                    # Extract the response part
                    if len(response) > len(prompt):
                        enhanced_text = response[len(prompt):].strip()

                except Exception as e:
                    print(f"AI enhancement failed, using tone templates: {e}")

            # Translate if needed
            if target_language != 'en':
                enhanced_text = self.translate_text(enhanced_text, target_language)

            return enhanced_text

        except Exception as e:
            print(f"Error in text processing: {str(e)}")
            # Fallback to original text with translation if needed
            if target_language != 'en':
                return self.translate_text(text, target_language)
            return text

# ==================== ENHANCED AUDIO GENERATOR ====================
class EnhancedAudioGenerator:
    def __init__(self):
        self.language_config = LANGUAGE_CONFIG

    def detect_language(self, text):
        """Enhanced language detection"""
        try:
            detected = detect(text)
            return detected if detected in self.language_config else 'en'
        except:
            return 'en'

    def generate_audio(self, text, language='en', slow=False):
        """Enhanced audio generation with better quality"""
        try:
            # Create temporary file with better naming
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            temp_file = tempfile.NamedTemporaryFile(
                delete=False,
                suffix=f'_echoverse_{timestamp}.mp3',
                prefix='audiobook_'
            )
            temp_file.close()

            # Enhanced TTS generation with error handling
            try:
                tts = gTTS(
                    text=text,
                    lang=language,
                    slow=slow,
                    lang_check=False
                )
                tts.save(temp_file.name)
                return temp_file.name

            except Exception as tts_error:
                print(f"TTS error for language {language}: {tts_error}")
                # Fallback to English if target language fails
                if language != 'en':
                    try:
                        tts_en = gTTS(text=text, lang='en', slow=slow)
                        tts_en.save(temp_file.name)
                        print(f"‚ö†Ô∏è Fallback to English TTS successful")
                        return temp_file.name
                    except:
                        pass
                return None

        except Exception as e:
            print(f"Error generating audio: {str(e)}")
            return None

# ==================== INITIALIZE COMPONENTS ====================
print("üîß Initializing enhanced components...")
granite_rewriter = EnhancedGraniteRewriter()
audio_generator = EnhancedAudioGenerator()

# ==================== ENHANCED GRADIO FUNCTIONS ====================
def process_and_generate_audio(text_input, file_input, tone, target_language, slow_speech, progress=gr.Progress()):
    """Enhanced main processing function with progress tracking"""

    progress(0.1, desc="üîç Processing input...")

    try:
        # Handle file input with better error handling
        if file_input is not None:
            try:
                with open(file_input.name, 'r', encoding='utf-8', errors='ignore') as f:
                    text = f.read()
                progress(0.2, desc="üìÅ File loaded successfully...")
            except Exception as e:
                return f"‚ùå Error reading file: {str(e)}", "", "", None, None, "‚ùå"
        elif text_input and text_input.strip():
            text = text_input.strip()
            progress(0.2, desc="üìù Text input processed...")
        else:
            return "‚ùå Please provide text input or upload a text file.", "", "", None, None, "‚ùå"

        # Text length management
        if len(text) > 8000:
            text = text[:8000] + "..."

        progress(0.3, desc="üåç Detecting language...")

        # Detect original language
        detected_lang = audio_generator.detect_language(text)
        detected_name = LANGUAGE_CONFIG.get(detected_lang, {'name': 'Unknown'})['name']

        progress(0.4, desc="üé® Applying AI enhancement...")

        # Rewrite text with enhanced AI
        rewritten_text = granite_rewriter.rewrite_text(text, tone, target_language)

        progress(0.7, desc="üéµ Generating high-quality audio...")

        # Generate audio
        target_name = LANGUAGE_CONFIG.get(target_language, {'name': 'Unknown'})['name']
        audio_file = audio_generator.generate_audio(rewritten_text, target_language, slow_speech)

        progress(0.9, desc="‚úÖ Finalizing...")

        if audio_file:
            status = f"‚úÖ Success! Original: {detected_name} ‚Üí Target: {target_name} | Tone: {tone.title()} | Quality: Premium"
            success_indicator = "‚úÖ"
        else:
            status = "‚ùå Audio generation failed"
            success_indicator = "‚ùå"

        progress(1.0, desc="üéâ Complete!")

        return status, text, rewritten_text, audio_file, audio_file, success_indicator

    except Exception as e:
        return f"‚ùå Processing error: {str(e)}", "", "", None, None, "‚ùå"

def get_language_choices():
    """Get organized language choices"""
    international = [(config['name'], code) for code, config in LANGUAGE_CONFIG.items() if config['family'] == 'International']
    indian = [(config['name'], code) for code, config in LANGUAGE_CONFIG.items() if config['family'] == 'Indian']

    # Sort alphabetically within each group
    international.sort()
    indian.sort()

    return international + indian

def clear_all():
    """Enhanced clear function"""
    return "", None, "neutral", "en", False, "", "", "", None, None, ""

# ==================== PREMIUM GRADIO INTERFACE ====================
def create_premium_interface():
    """Create premium enhanced UI/UX interface"""

    # Premium CSS with animations and modern design
    premium_css = """
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        --glass-bg: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.2);
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .gradio-container {
        background: var(--primary-gradient) !important;
        font-family: 'Inter', system-ui, -apple-system, sans-serif !important;
        min-height: 100vh;
    }

    .gr-panel {
        background: var(--glass-bg) !important;
        backdrop-filter: blur(20px) !important;
        border: 1px solid var(--glass-border) !important;
        border-radius: 20px !important;
        box-shadow: var(--shadow-xl) !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }

    .gr-panel:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.35) !important;
    }

    .gr-button-primary {
        background: var(--secondary-gradient) !important;
        border: none !important;
        border-radius: 15px !important;
        font-weight: 600 !important;
        padding: 12px 24px !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        box-shadow: var(--shadow-lg) !important;
        text-transform: none !important;
    }

    .gr-button-primary:hover {
        transform: translateY(-3px) scale(1.02) !important;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2) !important;
    }

    .gr-button-secondary {
        background: var(--glass-bg) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid var(--glass-border) !important;
        border-radius: 15px !important;
        color: white !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
    }

    .gr-textbox, .gr-dropdown, .gr-radio {
        border-radius: 12px !important;
        border: 1px solid var(--glass-border) !important;
        background: var(--glass-bg) !important;
        backdrop-filter: blur(10px) !important;
    }

    .gr-file {
        border: 2px dashed var(--glass-border) !important;
        border-radius: 15px !important;
        background: var(--glass-bg) !important;
        backdrop-filter: blur(10px) !important;
        transition: all 0.3s ease !important;
    }

    .gr-file:hover {
        border-color: #ffffff !important;
        background: rgba(255, 255, 255, 0.2) !important;
    }

    .status-success {
        background: var(--success-gradient) !important;
        color: white !important;
        padding: 15px !important;
        border-radius: 12px !important;
        font-weight: 500 !important;
    }

    .status-error {
        background: var(--secondary-gradient) !important;
        color: white !important;
        padding: 15px !important;
        border-radius: 12px !important;
        font-weight: 500 !important;
    }
    """

    with gr.Blocks(
        css=premium_css,
        title="EchoVerse Pro - Premium AI Audiobook Creator",
        theme=gr.themes.Glass()
    ) as interface:

        # Header with enhanced styling
        gr.HTML("""
        <div style="text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border-radius: 25px; margin-bottom: 30px; box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);">
            <h1 style="color: white; font-size: 4em; margin-bottom: 15px; font-weight: 700;
                       text-shadow: 0 4px 8px rgba(0,0,0,0.3);">
                üéß EchoVerse Pro
            </h1>
            <p style="color: white; font-size: 1.5em; opacity: 0.95; margin-bottom: 10px; font-weight: 400;">
                Transform Text into Expressive Audiobooks with AI Magic
            </p>
            <p style="color: white; font-size: 1.1em; opacity: 0.8; font-weight: 300;">
                ‚ú® Enhanced AI Processing ‚Ä¢ üåç 30+ Languages ‚Ä¢ üé® 6 Emotional Tones ‚Ä¢ üéµ Premium Audio Quality
            </p>
            <div style="margin-top: 20px; padding: 10px; background: rgba(255,255,255,0.1);
                        border-radius: 15px; backdrop-filter: blur(10px);">
                <span style="color: white; font-size: 0.9em;">
                    üáÆüá≥ Full Indian Languages Support: Hindi, Tamil, Telugu, Bengali, Marathi & More!
                </span>
            </div>
        </div>
        """)

        with gr.Row(variant="panel"):
            with gr.Column(scale=3):
                gr.Markdown("## üìù **Text Input**")

                text_input = gr.Textbox(
                    label="‚úçÔ∏è Enter your text content",
                    placeholder="Paste your story, article, or any text here to transform into an audiobook...",
                    lines=10,
                    max_lines=20,
                    show_label=True
                )

                file_input = gr.File(
                    label="üìÅ Or upload text file (.txt)",
                    file_types=[".txt"],
                    type="filepath"
                )

            with gr.Column(scale=2):
                gr.Markdown("## üé® **Customization**")

                # Enhanced tone selection
                tone_choices = [(f"{config['emoji']} {tone.title()} - {config['desc']}", tone)
                              for tone, config in TONE_CONFIG.items()]

                tone = gr.Radio(
                    choices=tone_choices,
                    value="neutral",
                    label="üé≠ Select Emotional Tone",
                    interactive=True
                )

                # Enhanced language selection
                language_choices = get_language_choices()

                target_language = gr.Dropdown(
                    choices=language_choices,
                    value="en",
                    label="üåç Target Language for Audio",
                    interactive=True
                )

                with gr.Row():
                    slow_speech = gr.Checkbox(
                        label="üêå Slow Speech Mode",
                        value=False,
                        info="Enable for better clarity"
                    )

        # Enhanced control buttons
        with gr.Row():
            with gr.Column(scale=2):
                process_btn = gr.Button(
                    "üöÄ Transform to Premium Audiobook",
                    variant="primary",
                    size="lg"
                )
            with gr.Column(scale=1):
                clear_btn = gr.Button(
                    "üóëÔ∏è Clear All",
                    variant="secondary",
                    size="lg"
                )

        # Status indicator with enhanced styling
        with gr.Row():
            status_output = gr.Textbox(
                label="üìä Processing Status",
                interactive=False
            )
            success_indicator = gr.Textbox(
                label="Status",
                visible=False
            )

        # Enhanced comparison view
        gr.Markdown("## üìä **Text Comparison & Results**")

        with gr.Row(variant="panel"):
            with gr.Column():
                gr.Markdown("### üìÑ **Original Text**")
                original_display = gr.Textbox(
                    label="Original Content",
                    lines=8,
                    interactive=False,
                    show_label=False
                )

            with gr.Column():
                gr.Markdown("### ‚ú® **AI-Enhanced Text**")
                rewritten_display = gr.Textbox(
                    label="AI-Enhanced Content",
                    lines=8,
                    interactive=False,
                    show_label=False
                )

        # Premium audio section
        gr.HTML("""
        <div style="text-align: center; padding: 20px; margin: 20px 0;
                    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                    border-radius: 20px; color: white;">
            <h2 style="margin: 0; font-size: 1.8em;">üéµ Premium Audio Output</h2>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">High-quality, expressive narration ready for download</p>
        </div>
        """)

        audio_output = gr.Audio(
            label="üéß Play Your Audiobook",
            type="filepath"
        )

        download_file = gr.File(
            label="üì• Download Premium MP3",
            interactive=False
        )

        # Enhanced examples section
        gr.Markdown("## üí° **Try These Examples**")

        example_data = [
            [
                "The ancient lighthouse stood majestically on the rocky cliff, its beacon cutting through the stormy night. For generations, it had guided countless ships safely to shore, becoming a symbol of hope and resilience for the coastal community.",
                "mysterious",
                "en",
                False
            ],
            [
                "Every morning brings new possibilities and opportunities to grow. Believe in yourself, embrace challenges as stepping stones, and remember that your dreams are valid and achievable with persistence and dedication.",
                "inspiring",
                "hi",
                False
            ],
            [
                "The detective examined the crime scene carefully. Something was amiss - the window was open, but there were no signs of forced entry. The victim's diary lay open on the desk, its final entry dated three days ago.",
                "suspenseful",
                "en",
                False
            ]
        ]

        gr.Examples(
            examples=example_data,
            inputs=[text_input, tone, target_language, slow_speech],
            label="üåü Premium Examples - Try Different Languages & Tones"
        )

        # Language showcase section
        gr.HTML("""
        <div style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);
                    border-radius: 20px; padding: 25px; margin: 25px 0; border: 1px solid rgba(255,255,255,0.2);">
            <h3 style="color: white; text-align: center; margin-bottom: 20px;">üåç Supported Languages</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 12px; text-align: center;">
                    <h4 style="color: #4facfe; margin-bottom: 10px;">üåê International</h4>
                    <p style="color: white; font-size: 0.9em;">English, Spanish, French, German, Italian, Portuguese, Russian, Japanese, Korean, Chinese, Arabic, Dutch, Polish, Turkish, Thai, Vietnamese</p>
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 12px; text-align: center;">
                    <h4 style="color: #ff6b6b; margin-bottom: 10px;">üáÆüá≥ Indian Languages</h4>
                    <p style="color: white; font-size: 0.9em;">Hindi, Bengali, Telugu, Marathi, Tamil, Gujarati, Kannada, Malayalam, Punjabi, Odia, Assamese, Urdu, Nepali, Sinhala, Myanmar</p>
                </div>
            </div>
        </div>
        """)

        # Feature showcase
        gr.HTML("""
        <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                    border-radius: 20px; padding: 30px; margin: 25px 0; text-align: center;">
            <h3 style="color: white; margin-bottom: 20px; font-size: 1.8em;">‚ú® Premium Features</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-top: 20px;">
                <div style="background: rgba(255,255,255,0.2); padding: 20px; border-radius: 15px; backdrop-filter: blur(10px);">
                    <div style="font-size: 2em; margin-bottom: 10px;">ü§ñ</div>
                    <h4 style="color: white; margin-bottom: 8px;">AI Text Enhancement</h4>
                    <p style="color: white; opacity: 0.9; font-size: 0.9em;">Advanced AI with 6 emotional tones</p>
                </div>
                <div style="background: rgba(255,255,255,0.2); padding: 20px; border-radius: 15px; backdrop-filter: blur(10px);">
                    <div style="font-size: 2em; margin-bottom: 10px;">üåç</div>
                    <h4 style="color: white; margin-bottom: 8px;">Multi-Language Support</h4>
                    <p style="color: white; opacity: 0.9; font-size: 0.9em;">30+ languages including all major Indian languages</p>
                </div>
                <div style="background: rgba(255,255,255,0.2); padding: 20px; border-radius: 15px; backdrop-filter: blur(10px);">
                    <div style="font-size: 2em; margin-bottom: 10px;">üéµ</div>
                    <h4 style="color: white; margin-bottom: 8px;">Premium Audio</h4>
                    <p style="color: white; opacity: 0.9; font-size: 0.9em;">High-quality TTS with natural voice synthesis</p>
                </div>
                <div style="background: rgba(255,255,255,0.2); padding: 20px; border-radius: 15px; backdrop-filter: blur(10px);">
                    <div style="font-size: 2em; margin-bottom: 10px;">üì±</div>
                    <h4 style="color: white; margin-bottom: 8px;">Modern UI/UX</h4>
                    <p style="color: white; opacity: 0.9; font-size: 0.9em;">Responsive design with glass morphism effects</p>
                </div>
            </div>
        </div>
        """)

        # Event handlers with enhanced feedback
        def update_status_style(status, indicator):
            if indicator == "‚úÖ":
                return gr.update(elem_classes=["status-success"])
            else:
                return gr.update(elem_classes=["status-error"])

        process_btn.click(
            fn=process_and_generate_audio,
            inputs=[text_input, file_input, tone, target_language, slow_speech],
            outputs=[status_output, original_display, rewritten_display, audio_output, download_file, success_indicator],
            show_progress=True
        )

        # Update status styling based on success/failure
        success_indicator.change(
            fn=update_status_style,
            inputs=[status_output, success_indicator],
            outputs=[status_output]
        )

        clear_btn.click(
            fn=clear_all,
            outputs=[text_input, file_input, tone, target_language, slow_speech,
                    original_display, rewritten_display, status_output, audio_output, download_file, success_indicator]
        )

        # Footer with credits
        gr.HTML("""
        <div style="text-align: center; padding: 25px; margin-top: 40px;
                    background: rgba(255,255,255,0.1); border-radius: 20px; backdrop-filter: blur(10px);">
            <p style="color: white; margin: 0; font-size: 1.1em; font-weight: 500;">
                üéß EchoVerse Pro - Premium AI Audiobook Creator
            </p>
            <p style="color: white; opacity: 0.8; margin: 5px 0 0 0; font-size: 0.9em;">
                Powered by Enhanced AI ‚Ä¢ Deep Translator ‚Ä¢ Google Text-to-Speech
            </p>
            <p style="color: white; opacity: 0.7; margin: 5px 0 0 0; font-size: 0.8em;">
                Made with ‚ù§Ô∏è for creators worldwide ‚Ä¢ Enhanced UI/UX with premium features
            </p>
        </div>
        """)

    return interface

# ==================== MAIN EXECUTION ====================
def stop_existing_gradio():
    """Stop any existing Gradio instances to free up ports"""
    try:
        import gradio as gr
        # Close all existing Gradio instances
        if hasattr(gr, 'close_all'):
            gr.close_all()
        print("üîÑ Cleared existing Gradio instances")
    except:
        pass

def main():
    """Enhanced main function with better initialization"""
    print("üéØ Starting EchoVerse Pro...")
    print("üåü Premium UI/UX with Enhanced Features - FIXED VERSION")
    print(f"üî• PyTorch version: {torch.__version__}")
    print(f"üî• CUDA available: {torch.cuda.is_available()}")
    print(f"üåç Languages supported: {len(LANGUAGE_CONFIG)}")
    print(f"üé® Tones available: {len(TONE_CONFIG)}")

    # Stop any existing Gradio instances first
    print("\nüîÑ Cleaning up previous instances...")
    stop_existing_gradio()

    # Display feature overview
    print("\n‚ú® Premium Features Loaded:")
    print("   ü§ñ Enhanced AI model for text enhancement")
    print("   üåç 30+ languages including all major Indian languages")
    print("   üé® 6 emotional tones (Neutral, Suspenseful, Inspiring, Romantic, Mysterious, Cheerful)")
    print("   üéµ High-quality Google Text-to-Speech")
    print("   üì± Premium glass morphism UI with animations")
    print("   üîÑ Reliable translation system")
    print("   üìÅ Multiple file format support")

    # Pre-load model with progress indication
    print("\nü§ñ Pre-loading AI model...")
    model_loaded = granite_rewriter.load_model()

    if model_loaded:
        print("‚úÖ Model loaded successfully! Ready for premium text enhancement.")
    else:
        print("‚ö†Ô∏è Model will use fallback processing with tone templates.")

    # Create and launch premium interface
    print("\nüöÄ Launching Premium Interface...")
    interface = create_premium_interface()

    # FIXED Launch configuration - removed invalid parameters and made port flexible
    try:
        print("üåê Launching with public sharing...")
        interface.launch(
            share=True,  # Creates public link
            server_name="0.0.0.0",
            server_port=None,  # Let Gradio find an available port automatically
            show_error=True,
            debug=False,
            quiet=False,
            prevent_thread_lock=False,
            ssl_verify=False  # Disable SSL verification for easier access
        )
        print("\nüîó Access your app using the public link above")
        print("‚ö†Ô∏è If you see 'Your connection is not private' - click 'Advanced' then 'Proceed'")
        print("‚úÖ This is normal for Gradio temporary links and completely safe")

    except OSError as e:
        print(f"‚ö†Ô∏è Port issue detected: {e}")
        print("üîÑ Trying with automatic port selection...")
        interface.launch(
            share=True,
            show_error=True,
            debug=False,
            quiet=False,
            ssl_verify=False
        )
    except Exception as e:
        print(f"‚ùå Launch error: {e}")
        print("üîÑ Trying minimal launch configuration...")
        interface.launch(share=True, ssl_verify=False)

# ==================== RUN THE APPLICATION ====================
if __name__ == "__main__":
    # Simple launch that guarantees local URL
    print("üöÄ Simple Launch - Guaranteed Local URL")

    # Clear previous instances
    try:
        import gradio as gr
        gr.close_all()
    except:
        pass

    # Create interface (using your existing function)
    interface = create_premium_interface()

    # Simple launch that ALWAYS shows local URL
    interface.launch(
        server_name="127.0.0.1",
        share=True,
        inbrowser=False,
        quiet=False  # This ensures URLs are displayed
    )

print("""
üéâ EchoVerse Pro is ready with premium features!
üåü Enhanced UI/UX with glass morphism design
üì± Responsive interface with smooth animations
üåç 30+ languages including comprehensive Indian language support
üé® 6 emotional tones for expressive storytelling
üéß Premium audio quality with professional narration
üîó Public sharing link generated for easy access
üîß Fixed compatibility issues with reliable dependencies
""")

# ==================== ADDITIONAL HELPER FUNCTIONS ====================

def get_language_stats():
    """Get statistics about supported languages"""
    international_count = sum(1 for config in LANGUAGE_CONFIG.values() if config['family'] == 'International')
    indian_count = sum(1 for config in LANGUAGE_CONFIG.values() if config['family'] == 'Indian')

    return {
        'total': len(LANGUAGE_CONFIG),
        'international': international_count,
        'indian': indian_count
    }

def validate_text_input(text):
    """Validate and clean text input"""
    if not text or not text.strip():
        return False, "Empty text provided"

    # Remove excessive whitespace
    text = ' '.join(text.split())

    # Check length
    if len(text) < 10:
        return False, "Text too short (minimum 10 characters)"

    if len(text) > 10000:
        return True, f"Text truncated to 10000 characters (was {len(text)})"

    return True, "Text validated successfully"

def cleanup_temp_files():
    """Cleanup temporary audio files"""
    try:
        temp_dir = tempfile.gettempdir()
        for filename in os.listdir(temp_dir):
            if filename.startswith('audiobook_') and filename.endswith('.mp3'):
                file_path = os.path.join(temp_dir, filename)
                # Remove files older than 1 hour
                if os.path.getctime(file_path) < time.time() - 3600:
                    os.remove(file_path)
                    print(f"üóëÔ∏è Cleaned up: {filename}")
    except Exception as e:
        print(f"Cleanup error: {e}")

# Print final statistics
stats = get_language_stats()
print(f"\nüìä Language Support Statistics:")
print(f"   üåç Total languages: {stats['total']}")
print(f"   üåê International: {stats['international']}")
print(f"   üáÆüá≥ Indian languages: {stats['indian']}")
print(f"   üé® Emotional tones: {len(TONE_CONFIG)}")
print(f"\nüöÄ EchoVerse Pro initialization complete!")

# Cleanup old temp files
cleanup_temp_files()